/*
 * generated by Xtext 2.21.0
 */
package xtext.robocode.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import xtext.robocode.generator.AdvancedRobot;
import xtext.robocode.generator.Arena;
import xtext.robocode.generator.Event;
import xtext.robocode.generator.GeneratorPackage;
import xtext.robocode.generator.RangeControlRobot;
import xtext.robocode.generator.Robot;
import xtext.robocode.services.GeneratorGrammarAccess;

@SuppressWarnings("all")
public class GeneratorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GeneratorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GeneratorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GeneratorPackage.ACTION:
				sequence_Action(context, (xtext.robocode.generator.Action) semanticObject); 
				return; 
			case GeneratorPackage.ADVANCED_ROBOT:
				sequence_AdvancedRobot_Impl(context, (AdvancedRobot) semanticObject); 
				return; 
			case GeneratorPackage.ARENA:
				sequence_Arena(context, (Arena) semanticObject); 
				return; 
			case GeneratorPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case GeneratorPackage.RANGE_CONTROL_ROBOT:
				sequence_RangeControlRobot(context, (RangeControlRobot) semanticObject); 
				return; 
			case GeneratorPackage.ROBOT:
				sequence_Robot_Impl(context, (Robot) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (comment=EString? (isSetter?='setter' | isGetter?='getter')? functionName=EString parameters=EString?)
	 */
	protected void sequence_Action(ISerializationContext context, xtext.robocode.generator.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns AdvancedRobot
	 *     AdvancedRobot_Impl returns AdvancedRobot
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (eventsHandled+=Event eventsHandled+=Event*)? 
	 *         (runActions+=Action runActions+=Action*)? 
	 *         (infiniteLoopActions+=Action infiniteLoopActions+=Action*)?
	 *     )
	 */
	protected void sequence_AdvancedRobot_Impl(ISerializationContext context, AdvancedRobot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Arena returns Arena
	 *
	 * Constraint:
	 *     (robot+=Robot robot+=Robot*)
	 */
	protected void sequence_Arena(ISerializationContext context, Arena semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (eventType=EventType? (actions+=Action actions+=Action*)?)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns RangeControlRobot
	 *     RangeControlRobot returns RangeControlRobot
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (eventsHandled+=Event eventsHandled+=Event*)? 
	 *         (runActions+=Action runActions+=Action*)? 
	 *         (infiniteLoopActions+=Action infiniteLoopActions+=Action*)?
	 *     )
	 */
	protected void sequence_RangeControlRobot(ISerializationContext context, RangeControlRobot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *     Robot_Impl returns Robot
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (eventsHandled+=Event eventsHandled+=Event*)? 
	 *         (runActions+=Action runActions+=Action*)? 
	 *         (infiniteLoopActions+=Action infiniteLoopActions+=Action*)?
	 *     )
	 */
	protected void sequence_Robot_Impl(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
